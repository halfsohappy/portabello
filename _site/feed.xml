<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-23T02:51:30-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Annabel Lee</title><subtitle>Annabel Lee is your best and only friend. She spends every waking moment either building something or occassionally dancing.
</subtitle><author><name>Annabel Lee</name></author><entry><title type="html">Logic-based Nixie Tube Pomodoro Timer</title><link href="http://localhost:4000/nixie_clock/" rel="alternate" type="text/html" title="Logic-based Nixie Tube Pomodoro Timer" /><published>2024-09-19T20:00:00-04:00</published><updated>2024-09-19T20:00:00-04:00</updated><id>http://localhost:4000/nixie_clock</id><content type="html" xml:base="http://localhost:4000/nixie_clock/"><![CDATA[<p>In which I use the fact that this is technically for an assignment in ECE 495: Product Design to justify spending dozens of hours on some of the most beautiful perfboard solder work of my entire career.</p>

<p>It shut down permanently last week, but we managed to get a video of our last two songs there. Skip ahead to 2:00 for the 
beginning of the song, or watch the whole thing if you’re feeling like the full experience.
&lt;!–</p>
<div class="iframe-wrapper">
<iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Flrassaby%2Fvideos%2F10158682476054619%2F&amp;width=500&amp;show_text=false&amp;height=281&amp;appId" width="500" height="281" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowtransparency="true" allow="encrypted-media" allowfullscreen="true"></iframe>
</div>
<p>–&gt;</p>]]></content><author><name>Annabel Lee</name></author><category term="music" /><category term="cello" /><category term="cellolele" /><category term="cover" /><summary type="html"><![CDATA[In which I use the fact that this is technically for an assignment in ECE 495: Product Design to justify spending dozens of hours on some of the most beautiful perfboard solder work of my entire career.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nixie_guts.jpg" /><media:content medium="image" url="http://localhost:4000/nixie_guts.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">48 Hour Wedding Arch</title><link href="http://localhost:4000/wedding-arch/" rel="alternate" type="text/html" title="48 Hour Wedding Arch" /><published>2023-12-30T19:00:00-05:00</published><updated>2023-12-30T19:00:00-05:00</updated><id>http://localhost:4000/wedding-arch</id><content type="html" xml:base="http://localhost:4000/wedding-arch/"><![CDATA[<p>A sweetheart table arch for my sister’s wedding under a time crunch.</p>

<p>My sister got married on New Year’s Eve 2023, and asked me around November if I’d build an arch to go over the sweetheart table where the bride and groom sit at dinner. She sent the following picture from pinterest as inspiration.</p>

<div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/inspo.jpg" alt="The Blueprint" style="height: 300px" />
    <figcaption>The Blueprint</figcaption>
</figure> </div>

<p>Of course I agreed! And promptly forgot until two days before the wedding, when she asked to see it. Suddenly, I was on a time crunch.</p>

<div class="container">
  <div class="row">
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/buying_woodsq.jpg" alt="That evening I planned out the design and grabbed some 2x4s from Lowes." style="height: 300px; object-fit: cover;" />
    <figcaption>That evening I planned out the design and grabbed some 2x4s from Lowes.</figcaption>
</figure> </div>
    </div>
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/in_shopsq.jpg" alt="Took them into workshop, eventually cut them all to length." style="height: 300px; object-fit: cover;" />
    <figcaption>Took them into workshop, eventually cut them all to length.</figcaption>
</figure> </div>
    </div>
  </div>
</div>

<div class="container">
  <div class="row">
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/by_chairsq.jpg" alt="The next day, I started mocking up the design but kept the arch split into three pieces so we could transport it to the venue." style="height: 300px; object-fit: cover;" />
    <figcaption>The next day, I started mocking up the design but kept the arch split into three pieces so we could transport it to the venue.</figcaption>
</figure> </div>
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/driveway_setup.jpg" alt="The complete mock-up, held with clamps." style="width: 500px; object-fit: cover;" />
    <figcaption>The complete mock-up, held with clamps.</figcaption>
</figure> </div>
    </div>
  </div>
</div>


<div class="container">
  <div class="row">
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/painting_morning.jpg" alt="We left for the wedding and that evening I painted the arch on my sister's porch." style="height: 300px; object-fit: cover;" />
    <figcaption>We left for the wedding and that evening I painted the arch on my sister's porch.</figcaption>
</figure> </div>
    </div>
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/hammer_dress_tall.jpg" alt="On the wedding day I got the pieces into the venue, assembled the arch, and attached the lights." style="height: 300px; object-fit: cover;" />
    <figcaption>On the wedding day I got the pieces into the venue, assembled the arch, and attached the lights.</figcaption>
</figure> </div>
    </div>
  </div>
</div>

<div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img//arch/wedding_day.jpg" alt="The final product! My sister loved it. Bonus points for the heterogenous bulb placement (the brightest one illuminates the bride) and the hidden wiring in the fake foilage." style="height: 600px; object-fit: cover;" />
    <figcaption>The final product! My sister loved it. Bonus points for the heterogenous bulb placement (the brightest one illuminates the bride) and the hidden wiring in the fake foilage.</figcaption>
</figure> </div>



<!-- 
[inspo]: /assets/img/arch/inspo.jpg
[ppp]: https://postpartumproject.com/
[ppp-old-landing]: /assets/img/postpartum-old-landing.jpg
[ppp-new-landing]: /assets/img/postpartum-new-landing.jpg
[atlantic]:  https://www.theatlantic.com/health/archive/2016/06/the-struggle-of-seeking-therapy-while-poor/484970/ -->
</div>]]></content><author><name>Annabel Lee</name></author><category term="woodworking/other" /><summary type="html"><![CDATA[A sweetheart table arch for my sister’s wedding under a time crunch.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/arch/wedding_day.jpg" /><media:content medium="image" url="http://localhost:4000/arch/wedding_day.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Latest PCB Design for Wearables with Mesh Networking</title><link href="http://localhost:4000/abLEDv5.0/" rel="alternate" type="text/html" title="Latest PCB Design for Wearables with Mesh Networking" /><published>2018-09-19T20:00:00-04:00</published><updated>2018-09-19T20:00:00-04:00</updated><id>http://localhost:4000/abLEDv5.0</id><content type="html" xml:base="http://localhost:4000/abLEDv5.0/"><![CDATA[<p>The tenth PCB sample for this project, smaller than ever while packing even more features.</p>

<p>The steps were:</p>
<ol>
  <li>A pre-processing step running across a small CPU cluster</li>
  <li>A processing step running on a 100-machine CPU cluster</li>
  <li>A calibration step running on one machine</li>
  <li>A processing step running on a 100-machine GPU cluster</li>
</ol>

<h2 id="architecture">Architecture</h2>

<p>After investigating a few different architectures, I concluded that AWS Batch provided the best combination of features we needed. Designed 
for high performance computing (HPC), AWS Batch is a thin wrapper around AWS Elastic Container Service that allows
users to run jobs in a scalable cluster and chain them together into pipelines.</p>

<p>The biggest issue I ran into was gaps in documentation, particularly around AWS Batch and using GPUs inside Docker containers.</p>

<p><img src="/assets/img/aws-architecture.png" alt="aws-architecture" title="AWS Architecture" /></p>

<p>The architecture I ended up choosing uses CircleCI to push Docker images to Amazon ECR. Those images are later used by 
AWS Batch to launch ECS clusters to run jobs on CPU and GPU clusters. That’s a bit of a mouthful, so I’ll try to unpack the architecture in 
the rest of this post.</p>

<h2 id="code-deployment">Code Deployment</h2>

<p>The first order of business was cleaning up the repository. The master branch was out of date with other branches,
so I worked with the scientists to solve some tech debt.</p>

<p>Next, I Dockerized the codebase. This was complicated by GPU processing, which is architecture-dependent. 
My Mac (with an Intel GPU) wouldn’t behave in the same way as AWS (NVIDIA).</p>

<p>I ended up revising this dozens of times before I got it right. Here’s a snippet of the Dockerfile ended up with:</p>
<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> python:2.7-jessie</span>

<span class="c"># ... install other dependencies (not shown)</span>

<span class="c"># nvidia-container-runtime</span>
<span class="k">ENV</span><span class="s"> NVIDIA_VISIBLE_DEVICES all</span>
<span class="k">ENV</span><span class="s"> NVIDIA_DRIVER_CAPABILITIES compute,utility</span>

<span class="c"># OpenCL (https://gitlab.com/nvidia/opencl/blob/ubuntu16.04/runtime/Dockerfile)</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> <span class="se">\
</span>        ocl-icd-libopencl1 <span class="se">\
</span>        opencl-headers <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>

<span class="c"># :(</span>
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-s</span> /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/lib/x86_64-linux-gnu/libOpenCL.so
<span class="k">RUN </span>pip <span class="nb">install </span>pyopencl

<span class="c"># NVIDIA driver</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /etc/OpenCL/vendors <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">echo</span> <span class="s2">"libnvidia-opencl.so.1"</span> <span class="o">&gt;</span> /etc/OpenCL/vendors/nvidia.icd
</code></pre></div></div>

<p>After I got Docker images working, I set up CircleCI to run builds and tests, and deploy images to Amazon’s EC2 Container Registry (ECR).</p>

<h2 id="getting-things-running">Getting things running</h2>

<p>The goal of the client was to create a simple way to set up, run, and monitor batch jobs.</p>

<h3 id="setup">Setup</h3>

<p>Setup is performed by a series of CloudFormation templates, each of which exports variables that can be subsequently
used by other templates.</p>
<ol>
  <li>Set up permissions (<code class="language-plaintext highlighter-rouge">deploy_iam_roles.yaml</code>)</li>
  <li>Set up an ECR repository (<code class="language-plaintext highlighter-rouge">deploy_ecr_repository.yaml</code>)</li>
  <li>Set up a custom GPU AMI based on Amazon Linux with <code class="language-plaintext highlighter-rouge">nvidia-docker2</code> installed (<code class="language-plaintext highlighter-rouge">deploy_custom_ami.yaml</code>)</li>
  <li>Set up AWS Batch queues, CPU and GPU compute environments of spot instances, and job definitions. (<code class="language-plaintext highlighter-rouge">deploy_batch_env.yaml</code>)</li>
</ol>

<h3 id="cli-run-monitor-and-stop-jobs">CLI: run, monitor, and stop jobs</h3>

<p>For running the pipeline, I built a simple command line tool that can launch new pipelines, monitor existing ones, and 
stop jobs if things go wrong.</p>

<h3 id="behind-the-scenes">Behind the scenes</h3>

<p>AWS Batch launches either normal jobs (1 Docker container) or “array jobs” (any number of Docker containers) for each step. Those 
Docker containers in turn run on a cluster of EC2 instances.</p>

<p>The CLI will decide based on the job name which of two queues to run the job in:</p>
<ul>
  <li>An auto-managed CPU-optimized cluster of standard AMIs</li>
  <li>A self-managed GPU-optimized cluster using a custom Amazon Machine Image (AMI)</li>
</ul>

<p>Each Docker container in a cluster receives the following environment variables:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">AWS_BATCH_JOB_ARRAY_INDEX</code>: an integer passed in by AWS to indicate which machine is running. This is the only 
variable that distinguishes jobs from each other, a limitation imposed by AWS Batch.</li>
  <li><code class="language-plaintext highlighter-rouge">ARRAY_SIZE</code>: the total number of jobs running in a step of the pipeline.</li>
  <li><code class="language-plaintext highlighter-rouge">LIST_FILE_S3_PATH</code>: a link to S3 where commands are being housed.</li>
</ul>

<p>To calculate which commands it should execute, each instance runs:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this cannot be changed -- it comes from Amazon
</span><span class="n">array_job_idx</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"AWS_BATCH_JOB_ARRAY_INDEX"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">array_job_idx</span><span class="p">:</span>
    <span class="n">array_job_idx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">array_job_idx</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">array_job_idx</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># total number of docker machines
</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"ARRAY_SIZE"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">array_size</span><span class="p">:</span>
    <span class="n">array_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">array_size</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">array_size</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">all_commands</span> <span class="o">=</span> <span class="n">get_list_file</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LIST_FILE_S3_PATH"</span><span class="p">))</span>
<span class="n">total_commands</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_commands</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">all_commands</span> <span class="o">=</span> <span class="n">get_list_file</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LIST_FILE_S3_PATH"</span><span class="p">))</span>

    <span class="c1"># get command from list of commands using job array index
</span>    <span class="n">lower_bound</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_commands</span> <span class="o">*</span> <span class="n">array_job_idx</span><span class="p">)</span> <span class="o">/</span> <span class="n">array_size</span>
    <span class="n">upper_bound</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_commands</span> <span class="o">*</span> <span class="p">(</span><span class="n">array_job_idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="n">array_size</span>

    <span class="c1"># 0-n commands per instance
</span>    <span class="n">commands</span> <span class="o">=</span> <span class="n">all_commands</span><span class="p">[</span><span class="n">lower_bound</span><span class="p">:</span><span class="n">upper_bound</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="benchmarking">Benchmarking</h2>

<p>On the same reconstructions, here’s a rough benchmark for improvements. Most of the performance improvement can be attributed
to the newer hardware the jobs run on.</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th>Pipeline</th>
      <th>CPU Cluster</th>
      <th>GPU Cluster Size</th>
      <th>Time</th>
      <th>Cost Per Run</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Before</td>
      <td>~100 instances</td>
      <td>~100 instances</td>
      <td>8 hours</td>
      <td>$100-300</td>
    </tr>
    <tr>
      <td>After</td>
      <td>~10 m3.8xlarge or similar instances</td>
      <td>~10 p3.2xlarge instances</td>
      <td>2-4 hours</td>
      <td>$10-100</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Annabel Lee</name></author><category term="projects" /><category term="abLED" /><summary type="html"><![CDATA[The tenth PCB sample for this project, smaller than ever while packing even more features.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/abLEDv5.0.png" /><media:content medium="image" url="http://localhost:4000/abLEDv5.0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Quick and Dirty PCB to (Hopefully) Finish A Year-long Project</title><link href="http://localhost:4000/poem-pcb/" rel="alternate" type="text/html" title="A Quick and Dirty PCB to (Hopefully) Finish A Year-long Project" /><published>2018-07-21T20:00:00-04:00</published><updated>2018-07-21T20:00:00-04:00</updated><id>http://localhost:4000/poem-pcb</id><content type="html" xml:base="http://localhost:4000/poem-pcb/"><![CDATA[<p>Hopefully, this will simplify the final assembly and mitigate integration hell enough that this gift for Christmas 2023 will be ready in time for Christmas 2024.</p>

<p>The steps were:</p>
<ol>
  <li>A pre-processing step running across a small CPU cluster</li>
  <li>A processing step running on a 100-machine CPU cluster</li>
  <li>A calibration step running on one machine</li>
  <li>A processing step running on a 100-machine GPU cluster</li>
</ol>

<h2 id="architecture">Architecture</h2>

<p>After investigating a few different architectures, I concluded that AWS Batch provided the best combination of features we needed. Designed 
for high performance computing (HPC), AWS Batch is a thin wrapper around AWS Elastic Container Service that allows
users to run jobs in a scalable cluster and chain them together into pipelines.</p>

<p>The biggest issue I ran into was gaps in documentation, particularly around AWS Batch and using GPUs inside Docker containers.</p>

<p><img src="/assets/img/profile-photo-annie.jpg" alt="aws-architecture" title="AWS Architecture" /></p>

<p>The architecture I ended up choosing uses CircleCI to push Docker images to Amazon ECR. Those images are later used by 
AWS Batch to launch ECS clusters to run jobs on CPU and GPU clusters. That’s a bit of a mouthful, so I’ll try to unpack the architecture in 
the rest of this post.</p>

<h2 id="code-deployment">Code Deployment</h2>

<p>The first order of business was cleaning up the repository. The master branch was out of date with other branches,
so I worked with the scientists to solve some tech debt.</p>

<p>Next, I Dockerized the codebase. This was complicated by GPU processing, which is architecture-dependent. 
My Mac (with an Intel GPU) wouldn’t behave in the same way as AWS (NVIDIA).</p>

<p>I ended up revising this dozens of times before I got it right. Here’s a snippet of the Dockerfile ended up with:</p>
<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> python:2.7-jessie</span>

<span class="c"># ... install other dependencies (not shown)</span>

<span class="c"># nvidia-container-runtime</span>
<span class="k">ENV</span><span class="s"> NVIDIA_VISIBLE_DEVICES all</span>
<span class="k">ENV</span><span class="s"> NVIDIA_DRIVER_CAPABILITIES compute,utility</span>

<span class="c"># OpenCL (https://gitlab.com/nvidia/opencl/blob/ubuntu16.04/runtime/Dockerfile)</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> <span class="se">\
</span>        ocl-icd-libopencl1 <span class="se">\
</span>        opencl-headers <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>

<span class="c"># :(</span>
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-s</span> /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/lib/x86_64-linux-gnu/libOpenCL.so
<span class="k">RUN </span>pip <span class="nb">install </span>pyopencl

<span class="c"># NVIDIA driver</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /etc/OpenCL/vendors <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">echo</span> <span class="s2">"libnvidia-opencl.so.1"</span> <span class="o">&gt;</span> /etc/OpenCL/vendors/nvidia.icd
</code></pre></div></div>

<p>After I got Docker images working, I set up CircleCI to run builds and tests, and deploy images to Amazon’s EC2 Container Registry (ECR).</p>

<h2 id="getting-things-running">Getting things running</h2>

<p>The goal of the client was to create a simple way to set up, run, and monitor batch jobs.</p>

<h3 id="setup">Setup</h3>

<p>Setup is performed by a series of CloudFormation templates, each of which exports variables that can be subsequently
used by other templates.</p>
<ol>
  <li>Set up permissions (<code class="language-plaintext highlighter-rouge">deploy_iam_roles.yaml</code>)</li>
  <li>Set up an ECR repository (<code class="language-plaintext highlighter-rouge">deploy_ecr_repository.yaml</code>)</li>
  <li>Set up a custom GPU AMI based on Amazon Linux with <code class="language-plaintext highlighter-rouge">nvidia-docker2</code> installed (<code class="language-plaintext highlighter-rouge">deploy_custom_ami.yaml</code>)</li>
  <li>Set up AWS Batch queues, CPU and GPU compute environments of spot instances, and job definitions. (<code class="language-plaintext highlighter-rouge">deploy_batch_env.yaml</code>)</li>
</ol>

<h3 id="cli-run-monitor-and-stop-jobs">CLI: run, monitor, and stop jobs</h3>

<p>For running the pipeline, I built a simple command line tool that can launch new pipelines, monitor existing ones, and 
stop jobs if things go wrong.</p>

<h3 id="behind-the-scenes">Behind the scenes</h3>

<p>AWS Batch launches either normal jobs (1 Docker container) or “array jobs” (any number of Docker containers) for each step. Those 
Docker containers in turn run on a cluster of EC2 instances.</p>

<p>The CLI will decide based on the job name which of two queues to run the job in:</p>
<ul>
  <li>An auto-managed CPU-optimized cluster of standard AMIs</li>
  <li>A self-managed GPU-optimized cluster using a custom Amazon Machine Image (AMI)</li>
</ul>

<p>Each Docker container in a cluster receives the following environment variables:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">AWS_BATCH_JOB_ARRAY_INDEX</code>: an integer passed in by AWS to indicate which machine is running. This is the only 
variable that distinguishes jobs from each other, a limitation imposed by AWS Batch.</li>
  <li><code class="language-plaintext highlighter-rouge">ARRAY_SIZE</code>: the total number of jobs running in a step of the pipeline.</li>
  <li><code class="language-plaintext highlighter-rouge">LIST_FILE_S3_PATH</code>: a link to S3 where commands are being housed.</li>
</ul>

<p>To calculate which commands it should execute, each instance runs:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this cannot be changed -- it comes from Amazon
</span><span class="n">array_job_idx</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"AWS_BATCH_JOB_ARRAY_INDEX"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">array_job_idx</span><span class="p">:</span>
    <span class="n">array_job_idx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">array_job_idx</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">array_job_idx</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># total number of docker machines
</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"ARRAY_SIZE"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">array_size</span><span class="p">:</span>
    <span class="n">array_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">array_size</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">array_size</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">all_commands</span> <span class="o">=</span> <span class="n">get_list_file</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LIST_FILE_S3_PATH"</span><span class="p">))</span>
<span class="n">total_commands</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_commands</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">all_commands</span> <span class="o">=</span> <span class="n">get_list_file</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LIST_FILE_S3_PATH"</span><span class="p">))</span>

    <span class="c1"># get command from list of commands using job array index
</span>    <span class="n">lower_bound</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_commands</span> <span class="o">*</span> <span class="n">array_job_idx</span><span class="p">)</span> <span class="o">/</span> <span class="n">array_size</span>
    <span class="n">upper_bound</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_commands</span> <span class="o">*</span> <span class="p">(</span><span class="n">array_job_idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="n">array_size</span>

    <span class="c1"># 0-n commands per instance
</span>    <span class="n">commands</span> <span class="o">=</span> <span class="n">all_commands</span><span class="p">[</span><span class="n">lower_bound</span><span class="p">:</span><span class="n">upper_bound</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="benchmarking">Benchmarking</h2>

<p>On the same reconstructions, here’s a rough benchmark for improvements. Most of the performance improvement can be attributed
to the newer hardware the jobs run on.</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th>Pipeline</th>
      <th>CPU Cluster</th>
      <th>GPU Cluster Size</th>
      <th>Time</th>
      <th>Cost Per Run</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Before</td>
      <td>~100 instances</td>
      <td>~100 instances</td>
      <td>8 hours</td>
      <td>$100-300</td>
    </tr>
    <tr>
      <td>After</td>
      <td>~10 m3.8xlarge or similar instances</td>
      <td>~10 p3.2xlarge instances</td>
      <td>2-4 hours</td>
      <td>$10-100</td>
    </tr>
  </tbody>
</table>

<!-- <style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery"><li><a href="/assets/img/arch/buying_wood.JPG" title="buying_wood"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/buying_wood.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="buying_wood" title="buying_wood" /><span>buying_wood</span></a></li><li><a href="/assets/img/arch/buying_woodsq.jpg" title="buying_woodsq"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/buying_woodsq.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="buying_woodsq" title="buying_woodsq" /><span>buying_woodsq</span></a></li><li><a href="/assets/img/arch/by_chair.JPG" title="by_chair"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/by_chair.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="by_chair" title="by_chair" /><span>by_chair</span></a></li><li><a href="/assets/img/arch/by_chairsq.jpg" title="by_chairsq"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/by_chairsq.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="by_chairsq" title="by_chairsq" /><span>by_chairsq</span></a></li><li><a href="/assets/img/arch/driveway_setup.JPG" title="driveway_setup"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/driveway_setup.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="driveway_setup" title="driveway_setup" /><span>driveway_setup</span></a></li><li><a href="/assets/img/arch/hammer_dress.jpg" title="hammer_dress"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/hammer_dress.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="hammer_dress" title="hammer_dress" /><span>hammer_dress</span></a></li><li><a href="/assets/img/arch/hammer_dress_alt.jpg" title="hammer_dress_alt"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/hammer_dress_alt.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="hammer_dress_alt" title="hammer_dress_alt" /><span>hammer_dress_alt</span></a></li><li><a href="/assets/img/arch/hammer_dress_tall.jpg" title="hammer_dress_tall"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/hammer_dress_tall.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="hammer_dress_tall" title="hammer_dress_tall" /><span>hammer_dress_tall</span></a></li><li><a href="/assets/img/arch/in_shopsq.jpg" title="in_shopsq"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/in_shopsq.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="in_shopsq" title="in_shopsq" /><span>in_shopsq</span></a></li><li><a href="/assets/img/arch/in_workshop.JPG" title="in_workshop"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/in_workshop.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="in_workshop" title="in_workshop" /><span>in_workshop</span></a></li><li><a href="/assets/img/arch/inspo.jpg" title="inspo"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/inspo.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="inspo" title="inspo" /><span>inspo</span></a></li><li><a href="/assets/img/arch/painting_morning.JPG" title="painting_morning"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/painting_morning.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="painting_morning" title="painting_morning" /><span>painting_morning</span></a></li><li><a href="/assets/img/arch/wedding_day.JPG" title="wedding_day"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/arch/wedding_day.JPG&w=300&h=300&output=jpg&q=50&t=square" alt="wedding_day" title="wedding_day" /><span>wedding_day</span></a></li><li><a href="/assets/img/cellolele-arch.jpg" title="cellolele-arch"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/cellolele-arch.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="cellolele-arch" title="cellolele-arch" /><span>cellolele-arch</span></a></li><li><a href="/assets/img/cellolele-living-room.jpg" title="cellolele-living-room"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/cellolele-living-room.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="cellolele-living-room" title="cellolele-living-room" /><span>cellolele-living-room</span></a></li><li><a href="/assets/img/cellolele-vivaldi.jpg" title="cellolele-vivaldi"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/cellolele-vivaldi.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="cellolele-vivaldi" title="cellolele-vivaldi" /><span>cellolele-vivaldi</span></a></li><li><a href="/assets/img/high-school-louis.jpg" title="high-school-louis"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/high-school-louis.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="high-school-louis" title="high-school-louis" /><span>high-school-louis</span></a></li><li><a href="/assets/img/hpc.jpg" title="hpc"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/hpc.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="hpc" title="hpc" /><span>hpc</span></a></li><li><a href="/assets/img/machine-learning.jpg" title="machine-learning"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/machine-learning.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="machine-learning" title="machine-learning" /><span>machine-learning</span></a></li><li><a href="/assets/img/nixie_guts.jpg" title="nixie_guts"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/nixie_guts.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="nixie_guts" title="nixie_guts" /><span>nixie_guts</span></a></li><li><a href="/assets/img/particles.jpg" title="particles"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/particles.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="particles" title="particles" /><span>particles</span></a></li><li><a href="/assets/img/phosphorus-cookie.jpg" title="phosphorus-cookie"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/phosphorus-cookie.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="phosphorus-cookie" title="phosphorus-cookie" /><span>phosphorus-cookie</span></a></li><li><a href="/assets/img/phosphorus-explosion-small.jpg" title="phosphorus-explosion-small"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/phosphorus-explosion-small.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="phosphorus-explosion-small" title="phosphorus-explosion-small" /><span>phosphorus-explosion-small</span></a></li><li><a href="/assets/img/poem_pcb.jpg" title="poem_pcb"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/poem_pcb.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="poem_pcb" title="poem_pcb" /><span>poem_pcb</span></a></li><li><a href="/assets/img/postpartum-new-landing.jpg" title="postpartum-new-landing"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/postpartum-new-landing.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="postpartum-new-landing" title="postpartum-new-landing" /><span>postpartum-new-landing</span></a></li><li><a href="/assets/img/postpartum-old-landing.jpg" title="postpartum-old-landing"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/postpartum-old-landing.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="postpartum-old-landing" title="postpartum-old-landing" /><span>postpartum-old-landing</span></a></li><li><a href="/assets/img/ppp-landing.jpg" title="ppp-landing"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/ppp-landing.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="ppp-landing" title="ppp-landing" /><span>ppp-landing</span></a></li><li><a href="/assets/img/ppp-old-new-logos.jpg" title="ppp-old-new-logos"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/ppp-old-new-logos.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="ppp-old-new-logos" title="ppp-old-new-logos" /><span>ppp-old-new-logos</span></a></li><li><a href="/assets/img/prague-pano.jpg" title="prague-pano"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/prague-pano.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="prague-pano" title="prague-pano" /><span>prague-pano</span></a></li><li><a href="/assets/img/prague-sunset.jpg" title="prague-sunset"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/prague-sunset.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="prague-sunset" title="prague-sunset" /><span>prague-sunset</span></a></li><li><a href="/assets/img/profile-photo-annie.jpg" title="profile-photo-annie"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/profile-photo-annie.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="profile-photo-annie" title="profile-photo-annie" /><span>profile-photo-annie</span></a></li><li><a href="/assets/img/scala-bg.jpg" title="scala-bg"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/scala-bg.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="scala-bg" title="scala-bg" /><span>scala-bg</span></a></li><li><a href="/assets/img/versace-eyewear-bg.jpg" title="versace-eyewear-bg"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/versace-eyewear-bg.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="versace-eyewear-bg" title="versace-eyewear-bg" /><span>versace-eyewear-bg</span></a></li><li><a href="/assets/img/versace-eyewear.jpg" title="versace-eyewear"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/versace-eyewear.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="versace-eyewear" title="versace-eyewear" /><span>versace-eyewear</span></a></li><li><a href="/assets/img/villa-lobos.jpg" title="villa-lobos"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/villa-lobos.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="villa-lobos" title="villa-lobos" /><span>villa-lobos</span></a></li><li><a href="/assets/img/wilson-auditorium.jpg" title="wilson-auditorium"><img src="//images.weserv.nl/?url=localhost:4000/assets/img/wilson-auditorium.jpg&w=300&h=300&output=jpg&q=50&t=square" alt="wilson-auditorium" title="wilson-auditorium" /><span>wilson-auditorium</span></a></li></ul>
 -->

<div class="container">
  <div class="row">
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img/profile-photo-annie.jpg" alt="caption" style="height: 150px;" />
    <figcaption>caption</figcaption>
</figure> </div>
    </div>
    <div class="col-sm">
      <div style="text-align: center;"> <figure class="captioned-image" style="">
    <img src="/assets/img/poem_pcb.jpg" alt="da pcb" style="height: 150px;" />
    <figcaption>da pcb</figcaption>
</figure> </div>
    </div>
    <!-- <div class="col-sm">
      One of three columns
    </div> -->
  </div>
</div>]]></content><author><name>Annabel Lee</name></author><category term="projects" /><category term="hardware" /><category term="ongoing" /><summary type="html"><![CDATA[Hopefully, this will simplify the final assembly and mitigate integration hell enough that this gift for Christmas 2023 will be ready in time for Christmas 2024.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/poem_pcb.jpg" /><media:content medium="image" url="http://localhost:4000/poem_pcb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Learning Machine Learning</title><link href="http://localhost:4000/learning-machine-learning/" rel="alternate" type="text/html" title="Learning Machine Learning" /><published>2018-04-17T20:00:00-04:00</published><updated>2018-04-17T20:00:00-04:00</updated><id>http://localhost:4000/learning-machine-learning</id><content type="html" xml:base="http://localhost:4000/learning-machine-learning/"><![CDATA[<p>Machine learning. Just when you thought there were enough blog posts about the best way to learn, here’s another.</p>

<div style="text-align: center;">
<figure class="captioned-image" style="">
    <img src="/assets/img/machine-learning-xkcd.png" alt="Statistics on steroids" style="height: 400px;" />
    <figcaption>Statistics on steroids</figcaption>
</figure>
</div>

<p>Jokes aside, there are so many online resources now for getting started with machine learning that the biggest problem
is figuring out which ones are right for you. These are the resources that worked for me:</p>

<ol>
  <li><a href="https://www.coursera.org/learn/machine-learning/">Andrew Ng’s first Coursera course</a>. I started learning machine learning with this course. It’s a great 
primer, based on the real CS229 course at Stanford and I’d recommend it to anyone starting off from a math/CS background.</li>
  <li><a href="http://a.co/heMZ59m">Hands-On Machine Learning with Scikit-Learn and TensorFlow</a>. After I finished the Coursera course, I wanted
to start applying ML hands on. This book is the most modern one I could find, and so far it’s been great.</li>
  <li><a href="https://www.coursera.org/specializations/deep-learning">Andrew Ng’s deep learning specialization</a>. I’m gradually working through the 5 course deep learning 
specialization on my free time.</li>
</ol>]]></content><author><name>Annabel Lee</name></author><category term="tech-blog" /><category term="tech" /><category term="data" /><summary type="html"><![CDATA[Machine learning. Just when you thought there were enough blog posts about the best way to learn, here’s another.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/machine-learning.jpg" /><media:content medium="image" url="http://localhost:4000/machine-learning.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Toxic - Cellolele</title><link href="http://localhost:4000/cellolele-toxic/" rel="alternate" type="text/html" title="Toxic - Cellolele" /><published>2017-12-11T19:00:00-05:00</published><updated>2017-12-11T19:00:00-05:00</updated><id>http://localhost:4000/cellolele-toxic</id><content type="html" xml:base="http://localhost:4000/cellolele-toxic/"><![CDATA[<p>Here’s a cover of Britney Spears’ Toxic I put together with Shannon Ferguson. For more videos, see Shannon’s 
<a href="https://www.youtube.com/channel/UCfkuEiCMHEP5I4SCRl4HG8w">Youtube</a> or our <a href="https://www.instagram.com/cellolelemusic/">Instagram</a>.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/bt5OfXMAW1Q" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>We also now have Soundcloud!</p>

<div class="iframe-wrapper">
<iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/434625504&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"></iframe>
</div>]]></content><author><name>Annabel Lee</name></author><category term="music" /><category term="cello" /><category term="cellolele" /><category term="cover" /><summary type="html"><![CDATA[Here’s a cover of Britney Spears’ Toxic I put together with Shannon Ferguson. For more videos, see Shannon’s Youtube or our Instagram.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/cellolele-arch.jpg" /><media:content medium="image" url="http://localhost:4000/cellolele-arch.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Design at Phosphorus</title><link href="http://localhost:4000/phosphorus-logo/" rel="alternate" type="text/html" title="Design at Phosphorus" /><published>2017-09-30T13:35:00-04:00</published><updated>2017-09-30T13:35:00-04:00</updated><id>http://localhost:4000/phosphorus-logo</id><content type="html" xml:base="http://localhost:4000/phosphorus-logo/"><![CDATA[<p>At <a href="http://www.phosphorus.com">Phosphorus</a>, my focus was building software to analyze genetic sequencing data. I can’t share any of the 
code I developed there, but I can share the process behind something I made: the logo.</p>

<div id="slideshow-name" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        
        
        <li data-target="#slideshow-name" data-slide-to="0" class="active"></li>
        
        
        
        <li data-target="#slideshow-name" data-slide-to="1"></li>
        
        
    </ol>

    <div class="carousel-inner">
        
        
            <div class="carousel-item active">
                <img src="/assets/img/phosphorus-cookie.jpg" class="d-block w-100" alt="Image caption" />
                <div class="carousel-caption d-none d-md-block">
                    <p>Image caption</p>
                </div>
            </div>
        
        
        
            <div class="carousel-item">
                <img src="/assets/img/abLEDv5.0.png" class="d-block w-100" alt="Second image caption" />
                <div class="carousel-caption d-none d-md-block">
                    <p>Second image caption</p>
                </div>
            </div>
        
        
    </div>
    <a class="carousel-control-prev" href="#slideshow-name" role="button" data-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#slideshow-name" role="button" data-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
    </a>
</div>

<p>Here’s where it began. I was trying to convey Phosphorus’ place on the periodic table (the atomic number 15), and the 
fact that we were doing genetic tests (hence the DNA double helix).</p>

<div style="text-align: center;">
<figure class="captioned-image" style="">
    <img src="/assets/img/phosphorus-square.png" alt="v1" style="height: 150px;" />
    <figcaption>v1</figcaption>
</figure>
<figure class="captioned-image" style="">
    <img src="/assets/img/phosphorus-original.png" alt="v2" style="height: 150px;" />
    <figcaption>v2</figcaption>
</figure>
</div>

<p>Since then, the design evolved. The colors became brighter, and the lines connect to only one side.</p>

<div style="text-align: center;">
<figure class="captioned-image" style="">
    <img src="/assets/img/phosphorus-new.png" alt="v3" style="height: 150px;" />
    <figcaption>v3</figcaption>
</figure>
</div>

<p>It’s cool seeing your logo on the <a href="http://www.phosphorus.com">web</a>, but my favorite spot I’ve seen the logo I made is on a cupcake.</p>

<p><img src="/assets/img/phosphorus-cookie.jpg" alt="cookie" title="Phosphorus Cookie" /></p>]]></content><author><name>Annabel Lee</name></author><category term="projects" /><category term="design" /><category term="logo" /><summary type="html"><![CDATA[At Phosphorus, my focus was building software to analyze genetic sequencing data. I can’t share any of the code I developed there, but I can share the process behind something I made: the logo.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/phosphorus-explosion-small.jpg" /><media:content medium="image" url="http://localhost:4000/phosphorus-explosion-small.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Versace Eyewear Soundtrack</title><link href="http://localhost:4000/versace-eyewear/" rel="alternate" type="text/html" title="Versace Eyewear Soundtrack" /><published>2017-02-05T12:35:00-05:00</published><updated>2017-02-05T12:35:00-05:00</updated><id>http://localhost:4000/versace-eyewear</id><content type="html" xml:base="http://localhost:4000/versace-eyewear/"><![CDATA[<p>In December of 2016, I recorded this original composition for <a href="http://www.versace.com/us/en-us/men/eyewear/">Versace Eyewear</a> with the unstoppable flamenco guitarist,
<a href="http://jacksonscottmusic.com/">Jackson Scott</a>. It was used in Versace’s Spring 2017 campaign.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZRonQmAInfo" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>Jackson and I met at a jam while he was visiting NYC, and he had a vision for adding cello to a commercial spot he was
working on. We spent a couple of sessions improvising together and went into the studio.</p>

<p>I had done a few studio recordings before, but this was my first advertising gig. I really wasn’t sure what to expect. 
As it turned out, fitting all the music we had thought about into a one minute commercial spot was totally impossible. 
We ended up just improvising something brand new in the studio.</p>]]></content><author><name>Annabel Lee</name></author><category term="music" /><category term="cello" /><summary type="html"><![CDATA[In December of 2016, I recorded this original composition for Versace Eyewear with the unstoppable flamenco guitarist, Jackson Scott. It was used in Versace’s Spring 2017 campaign.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/versace-eyewear.jpg" /><media:content medium="image" url="http://localhost:4000/versace-eyewear.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Converge — Ports Hackathon</title><link href="http://localhost:4000/converge-hackathon/" rel="alternate" type="text/html" title="Converge — Ports Hackathon" /><published>2017-01-21T19:00:00-05:00</published><updated>2017-01-21T19:00:00-05:00</updated><id>http://localhost:4000/converge-hackathon</id><content type="html" xml:base="http://localhost:4000/converge-hackathon/"><![CDATA[<p>In its 2016 “Visions of Future Shipping” <a href="https://www.wartsila.com/media/news/06-09-2016-wartsila-presents-its-visions-of-future-shipping">paper</a>, <a href="https://www.wartsila.com/">Wärtsilä</a> proposed ideas that could change the way
that shipping companies operate in the future. One of the most novel ideas was ships traveling in convoy. 
<a href="http://news.mit.edu/2016/driverless-truck-platoons-save-time-fuel-1221">Researchers at MIT</a> explain that “like birds and fighter jets flying in formation, or bikers 
and race car drivers drafting in packs, vehicles experience less aerodynamic drag when they drive close together.”</p>

<p>For the 2017 Ports and Logistics <a href="https://nyc-portshackathon.devpost.com/">Hackathon</a>, we set about to take create a platform for helping
ships to form convoys for 10 - 20% in improved fuel efficiency. <!--more--> Aside from the fuel efficiency gains, 
traveling in convoys also allows ships to share resources like medical supplies rather than make expensive detours.</p>

<p>The following visualization, created by <a href="https://www.kiln.digital/">Kiln</a> and the <a href="http://www.bartlett.ucl.ac.uk/energy">UCL Energy Institute</a>, shows the global movement of 
ships in 2012.</p>

<iframe src="//www.shipmap.org" style="width: 100%; height: 600px; border: 0" frameborder="0"></iframe>

<p>To allow these ships to become convoys, we created <a href="http://rassaby.com/converge/">Converge</a>. The target market is small shipping companies that could 
collaborate with each other to compete with the <a href="https://en.wikipedia.org/wiki/Maersk_Triple_E-class_container_ship">giant, more fuel-efficient ships</a> 
of their goliath competitors. Based on the data shown above and other ship lane data, we chose 5 of the highest-traffic 
routes for the first version of the product.</p>

<p>Each dot represents a convoy of ships traveling along one of the routes.</p>

<p><img src="/assets/img/converge.png" alt="converge-img" title="Converge Screenshot" /></p>]]></content><author><name>Annabel Lee</name></author><category term="projects" /><category term="tech" /><category term="design" /><category term="hackathon" /><summary type="html"><![CDATA[In its 2016 “Visions of Future Shipping” paper, Wärtsilä proposed ideas that could change the way that shipping companies operate in the future. One of the most novel ideas was ships traveling in convoy. Researchers at MIT explain that “like birds and fighter jets flying in formation, or bikers and race car drivers drafting in packs, vehicles experience less aerodynamic drag when they drive close together.” For the 2017 Ports and Logistics Hackathon, we set about to take create a platform for helping ships to form convoys for 10 - 20% in improved fuel efficiency.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/converge-bg.png" /><media:content medium="image" url="http://localhost:4000/converge-bg.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GPU Particle Simulations</title><link href="http://localhost:4000/particles/" rel="alternate" type="text/html" title="GPU Particle Simulations" /><published>2014-06-20T13:35:00-04:00</published><updated>2014-06-20T13:35:00-04:00</updated><id>http://localhost:4000/particles</id><content type="html" xml:base="http://localhost:4000/particles/"><![CDATA[<p>For our final graphics project, <a href="http://jwoogerd.github.io/">Jayme Woogerd</a> and I implemented a
configurable particle system in C using OpenGL buffer 
objects, instancing, and GLSL shaders.</p>

<p>We started by using fixed-pipeline OpenGL, rendering each particle as a point.
Most of the parameters are configurable, including the number of 
particles generated, the randomness spread, camera direction, 
and location of particle generation, and the physical forces.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/d2dnotW9SSY" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>We then added vertex buffer objects and instancing. Instancing 
allows us to define a single two-dimensional template billboard, 
shared by all particles. This 2-dimensional image is 
rotated to always face the camera - giving the illusion 
that the particles are 3-dimensional, while keeping the 
rendering fast.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/kWU0Iwb4JR0" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>Attributes that are unique to a given particle (such as size, 
color, position and age) are stored and sent to the GPU via 
buffer objects.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/RpUe9H8xyJo" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>Finally, we used the GL shader language to implement different
                texture maps and animations.</p>

<div class="iframe-wrapper">
<iframe width="560" height="315" src="https://www.youtube.com/embed/1RiWas8iHeU" frameborder="0" allowfullscreen=""></iframe>
</div>]]></content><author><name>Annabel Lee</name></author><category term="projects" /><category term="tech" /><category term="visualization" /><category term="shaders" /><summary type="html"><![CDATA[For our final graphics project, Jayme Woogerd and I implemented a configurable particle system in C using OpenGL buffer objects, instancing, and GLSL shaders.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/particles.jpg" /><media:content medium="image" url="http://localhost:4000/particles.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>